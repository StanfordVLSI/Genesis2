/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/rtl/Primitives/reg_file.vp#10 $
 ** $DateTime: 2011/10/02 20:46:43 $
 ** $Change: 9535 $
 ** $Author: shacham $
 *************************************************************************/

/* *****************************************************************************
 * File: reg_file.vp
 * 
 * Description:
 * This file is using Genesis2 to make a register file.
 * A register file have a config bus input port, and a config bus output port. 
 * The configuration request values are flopped and than handled:
 * * If cfgIn_op is a no-op, nothing happens.
 * * If cfgIn_op is a bypass op, the  cfgIn_* signals are passed to the 
 *	cfgOut_* ports.
 * * If cfgIn_op is a read/write op, and cfgIn_addr is with in the address
 *	range, then the corresponding register is read/written. The values
 *	are streamed to the cfgOut_* ports, except for cfgOut_op that becomes
 *	a bypass-op.
 *	If cfgIn_addr is not in this reg_file address range, all the  cfgIn_* 
 *	signals are passed to the cfgOut_* ports. Someone else will answer...
 * 
 * Note: All registers in the register file are write-able and readable by the
 *	configuration bus (even though some may only have output ports or only
 *	input ports).
 * 
 * 
 * REQUIRED GENESIS PARAMETERS:
 * ----------------------------
 * * REG_LIST  - List of registers. Each element in the list is a hash that contains
 *    * name - used for generating the enable and data output/input signals
 *    * width - register width
 *    * default - (optional) default value. Can be set later by XML input
 *    * IEO - I indicates this register connected to an input signal
 *            E indicates that the input is qualified by an enable 
 *            O indicates that the output is connected to an output signal
 *            Valid options include: I, IE, O, IO, IEO
 *    * comment - (optional) description of the register
 * * BASE_ADDR - Base address for this module 
 * * CFG_OPCODES - Interpretation of the opcode. Must contain the following feilds:
 *    * nop - value of cfgIn_op for a no-op (default is 0)
 *    * read - value of cfgIn_op for a read operation (default is 1)
 *    * write - value of cfgIn_op for a write operation (default is 2)
 *    * bypass - value of cfgIn_op for bypassing the control signals (default is 3)
 * * IFC_REF - An instance of the reg_file_ifc (used as reference)
 * 
 * Inputs:
 * -------
 * Clk
 * Reset
 * cfgIn - Incomming config request
 * foreach REG in REG_LIST (but depending on the IEO flag):
 *  * <REG.name>_en - enable signal for the register
 *  * <REG.name>_d - data input for the register
 * 
 * 
 * Outputs:
 * --------
 * cfgOut - Outgoing reply for config request cfgIn
 * foreach REG in REG_LIST (but depending on the IEO flag):
 *  * <REG.name>_q - data output for the register
 * 
 * 
 * 
 * NOTE: registers with input from the design may become resource contention
 *	 if both their private enable and their by-address enable signals are raised.
 *       Priority is always given to data from the cfg bus!
 * 
 * Change bar:
 * -----------
 * Date          Author   Description
 * Jan 20, 2010  danowitz init version
 * Mar 19, 2010  shacham  modified input data structure. Enabled registers with 
 *			  input from design signals (both qualified by 'enable'
 *			  and not)
 * Mar 24, 2010  shacham  Added option of concatenating regfiles. 
 *			  Added opcode decoding
 * May 30, 2010  shacham  Added TMode input
 * Oct 02, 2011  shacham  Updated flop instantiation type constrain and 
 *                        upgraded param declaration to use 'parameter' notation
 *  
 * 
 * ****************************************************************************/

//; # Perl Libraries
//; use POSIX;
//;
//;
// ACTUAL GENESIS2 PARAMETERIZATIONS
//; my $reg_list = parameter(Name => 'REG_LIST',
//;                          Val  => [	{name => 'regA', width => 5, default => 17, IEO => 'ie', comment => 'this is a reg'}, 
//;					{name => 'regB', width => 10, default => 27, IEO => 'o'}, 
//;					{name => 'regC', width => 15, IEO => 'ieo'},
//;					{name => 'regD', width => 31, IEO => 'ieo'},
//;					{name => 'regE', width => 32, IEO => 'ieo'},
//;					{name => 'regF', width => 2, IEO => 'ieo'},
//;					{name => 'regG', width => 20, default => 1, IEO => 'ieo'}, 
//;					{name => 'regH', width => 11, default => 2, IEO => 'o'}, 
//;					{name => 'regI', width => 12, default => 3, IEO => 'ieo'}, 
//;					{name => 'regJ', width => 13, default => 4, IEO => 'i'}, 
//;					{name => 'regK', width => 14, default => 5, IEO => 'ieo'}, 
//;					{name => 'regL', width => 15, default => 6, IEO => 'i'}, 
//;			      	     ],
//;                          Doc => "List of registers. Each element in the list is a hash that contains: ".
//;                                 "* name - used for generating the enable and data output/input signals ".
//;                                 "* width - register width ".
//;                                 "* default - (optional) default value. Can be set later by XML input; ".
//;                                 "* IEO - I indicates this register connected to an input signal; ".
//;                                 "E indicates that the input is qualified by an enable; ".
//;                                 "O indicates that the output is connected to an output signal; ".
//;                                 "Valid options include: I, IE, O, IO, IEO ".
//;                                 "* comment - (optional) description of the register" );
//; my $num_regs = scalar(@{$reg_list});
//; my $base_addr = parameter(Name => 'BASE_ADDR', Val => 0, Doc => "Base address for this module");
//; my $cfg_ops = parameter(Name => 'CFG_OPCODES', Val => {nop=>0, read=>1, write=>2, bypass=>3},
//;                         Doc => "Interpretation of the opcode. Must contain the following feilds: ".
//;                                "* nop - value of cfgIn_op for a no-op (default is 0) ".
//;                                "* read - value of cfgIn_op for a read operation (default is 1) ".
//;                                "* write - value of cfgIn_op for a write operation (default is 2) ".
//;                                "* bypass - value of cfgIn_op for bypassing the control signals (default is 3)" );
//; my $ifc_ref = parameter(Name => 'IFC_REF', Val => '',
//;                         Doc => "This parameter should probably always be bound (i.e., immutable). ".
//;                                "Expected value is an instance of the reg_file_ifc (used as reference)" );
//; $self->error("Missing parameter: IFC_REF") if ($ifc_ref eq '');
//;
//; # Extract paramteres from the interdace
//; my $cfgIn_ifc_obj = $self->clone_inst($ifc_ref, 'cfgIn');
//; my $cfgOut_ifc_obj = $self->clone_inst($ifc_ref, 'cfgOut');
//; my $cfg_bus_width = $cfgIn_ifc_obj->get_param('CFG_BUS_WIDTH');
//; my $cfg_addr_width = $cfgIn_ifc_obj->get_param('CFG_ADDR_WIDTH');
//; my $cfg_op_width = $cfgIn_ifc_obj->get_param('CFG_OPCODE_WIDTH');
//;
//;
//;# Verify correctness of register parameters:
//; my $cnt = 0;
//; foreach my $reg (@{$reg_list}){
//;   $self->error("Register $cnt is missing it's name!") 
//;	unless defined $reg->{name};
//;   $self->error("Register $reg->{name} (reg $cnt) is missing it's width!") 
//;	unless defined $reg->{width};
//;   $self->error("Register $reg->{name} (reg $cnt) is wider than the config bus!") 
//;	unless $reg->{width} <= $cfg_bus_width;
//;   $self->error("Register $reg->{name} (reg $cnt) is missing it's IEO!") 
//;	unless defined $reg->{IEO};
//;   $self->error("Register $reg->{name} (reg $cnt) has an invalid IEO flag -->$reg->{IEO}<--!".
//;		   "(allowed values: I, IE, O, IO, IEO)") 
//;	unless ($reg->{IEO} =~ m/^(i|ie|o|io|ieo)$/i);
//;   $cnt++;
//; } # end of "foreach my $reg..."
//;
//;# Verify correctness of opcode parameters:
//; $self->error("CFG_OPCODES must define values for all of {nop, read, write, bypass} opcodes")
//;	if (!defined $cfg_ops->{nop} || !defined $cfg_ops->{read} || 
//;	    !defined $cfg_ops->{write} || !defined $cfg_ops->{bypass});
//; my $nop = $cfg_ops->{nop};
//; my $rdop = $cfg_ops->{read};
//; my $wrop = $cfg_ops->{write};
//; my $bypassop = $cfg_ops->{bypass};
//; $self->error("CFG_OPCODES values don't fit within CFG_OPCODE_WIDTH bits")
//;	if (($nop > 2**$cfg_op_width-1) || ($rdop > 2**$cfg_op_width-1) || 
//;	    ($wrop > 2**$cfg_op_width-1) || ($bypassop > 2**$cfg_op_width-1));
//;
//;
//; my $num_req_addr_bits = POSIX::ceil(log($num_regs)/log(2));

// Fix for reg files with single registers
//; if ($num_req_addr_bits == 0) {
//;    $num_req_addr_bits = 1;
//; }
//; my $num_not_used_lsbs = POSIX::ceil(log($cfg_bus_width/8)/log(2));
//; my $usable_addr_range = ($num_req_addr_bits+$num_not_used_lsbs-1).":".$num_not_used_lsbs;
//; my $base_addr_range = ($cfg_addr_width-1).":".($num_req_addr_bits+$num_not_used_lsbs);
//; my $base_addr_width = $cfg_addr_width - ($num_req_addr_bits+$num_not_used_lsbs);
//; my $base_addr_trunc = $base_addr / 2**($num_req_addr_bits+$num_not_used_lsbs);
//; my $base_addr_hex = sprintf("%d\'h%x", $base_addr_width, $base_addr_trunc);
//;

// =============================================================================
//			LIST OF REGISTERS IN THIS MODULE:
// =============================================================================
// LEGEND: 
//	BASE_ADDRESS `sprintf("%d\'h%x", $base_addr)`
//	IEO:	I for input (register samples design)
//		O for output (register drives design)
//		IE for enabled input (register samples design if enable is high)
//
// REGISTERS
//; $cnt = 0;
//; foreach my $reg (@{$reg_list}){
// `$reg->{name}` [`$reg->{width}-1`:0] IEO=`$reg->{IEO}` Offset=`$cnt<<$num_not_used_lsbs` -- `$reg->{comment}`
//;   $cnt++;
//; } # end of "foreach my $reg..."




// =============================================================================
//				     MODULE:
// =============================================================================
module `$self->get_module_name()`
  (
   // inputs for the config interface
    input                               Clk,
    input                               Reset,
   `$cfgIn_ifc_obj->get_module_name()`.cfgIn cfgIn, // incoming requests
   `$cfgOut_ifc_obj->get_module_name()`.cfgOut cfgOut, // outgoing responds

   //; foreach my $reg (@{$reg_list}){
   //;   if ($reg->{IEO} =~ m/i/i){
    // inputs for register `$reg->{name}`
    input [`$reg->{width}-1`:0] 	`$reg->{name}`_d,
   //;   }
   //;   if ($reg->{IEO} =~ m/e/i){
    input 				`$reg->{name}`_en,
   //;   }    
   //;   if ($reg->{IEO} =~ m/i/i){

   //;   }
   //; } # end of foreach ...

   //outputs
   //; foreach my $reg (@{$reg_list}){
   //;   if ($reg->{IEO} =~ m/o/i){
    // outputs for register `$reg->{name}`
    output [`$reg->{width}-1`:0] 	`$reg->{name}`_q,
				   
   //;   }		       
   //; } # end of foreach ...
   //;			  
   
   // Test mode
    input 				TMode
   );


   // floping cfg inputs to produce delayed signals:
   logic [`$cfg_addr_width-1`:0] 	cfgIn_addr_del;
   logic [`$cfg_bus_width-1`:0] 	cfgIn_data_del;
   logic [`$cfg_op_width-1`:0] 		cfgIn_op_del;
   //; my $flop_inst = $self->unique_inst('flop','cfgIn_floper', 
   //;					  'FLOP_WIDTH' => $cfg_addr_width+$cfg_bus_width+$cfg_op_width,
   //;					  'FLOP_TYPE' => 'RFLOP',
   //;					  'FLOP_DEFAULT' => 0);
   `$flop_inst->get_module_name()` `$flop_inst->get_instance_name()`
     (.Clk(Clk), .Reset(Reset), .Enable(/*not used*/),
      .data_in({cfgIn.addr, cfgIn.data, cfgIn.op}),
      .data_out({cfgIn_addr_del, cfgIn_data_del, cfgIn_op_del}));



   // internal wiring signals
   logic [`$num_regs-1`:0] 		onehot_en;
   logic 				addr_in_range;
   logic [`$num_req_addr_bits-1`:0] 	cfgIn_addr_del_int; // internal (shorter) address signal
   logic [`$num_regs-1`:0] 		regs_en;
   logic [`$cfg_bus_width-1`:0] 	regs_d[`$num_regs-1`:0];
   logic [`$cfg_bus_width-1`:0] 	regs_q[`$num_regs-1`:0];

   // make sure that the input address is in range
   assign addr_in_range = ((`$base_addr_hex` == cfgIn_addr_del[`$base_addr_range`]) &&
			   (cfgIn_addr_del[`$usable_addr_range`] < `$num_req_addr_bits+1`'d`$num_regs`))? 1'b1: 1'b0;
   
   // Pick the right bits of the address signal (if out of range default to zero)
   assign cfgIn_addr_del_int[`$num_req_addr_bits-1`:0] = (addr_in_range)? cfgIn_addr_del[`$usable_addr_range`]: '0;
   
   // For config writes, there can be at most onehot enable signal
   always_comb begin
      onehot_en = '0;
      onehot_en[cfgIn_addr_del_int] = (cfgIn_op_del == `$wrop`) && (addr_in_range == 1'b1);
   end

   // assign the config output ports
   assign cfgOut.data = (addr_in_range != 1'b1) ? cfgIn_data_del : // if not in range, pass the signal to the next guy
			(cfgIn_op_del == `$rdop`) ? regs_q[cfgIn_addr_del_int] : // if in range and this is a readop... read
			cfgIn_data_del;
   assign cfgOut.addr = cfgIn_addr_del;
   assign cfgOut.op = (addr_in_range != 1'b1) ? cfgIn_op_del : // if not in range pass the signal to next guy
		      (cfgIn_op_del != `$nop`) ? `$bypassop`:	// if in range (and not a nop) mark as done (bypass)
		      `$nop`;					// else, it's just a nop.
      

   // Instantiate all the registers:
   // ==============================
   //; $cnt = 0;
   //; my @flop_insts = ();
   //; foreach my $reg (@{$reg_list}){
   // register #`$cnt` --- name:`$reg->{name}`, type:`$reg->{IEO}`, width:`$reg->{width}`
   //;	my %params = ();
   //;	$params{'FLOP_WIDTH'} = $reg->{width}; 
   //;	$params{'FLOP_DEFAULT'} = $reg->{default} if exists $reg->{default}; 
   //;	$flop_inst = $self->unique_inst('flop',$reg->{name}."_reg", %params);
   //;	push(@flop_insts, $flop_inst);
   //;
   //;	## Pick the right enable signal based on parameters
   //;	if ($reg->{IEO} =~ m/e/i){
   assign regs_en[`$cnt`] = `$reg->{name}`_en | onehot_en[`$cnt`];// flop on input_en or on cfg writes
   //;	}elsif ($reg->{IEO} =~ m/i/i){
   assign regs_en[`$cnt`] = 1; // flop input with no qualifier
   //;	}else{
   assign regs_en[`$cnt`] = onehot_en[`$cnt`]; // flop input only on cfg writes
   //;	}
   //;
   //;	## Pick the right data input based on parameters
   //;	if ($reg->{IEO} !~ m/i/i){
   assign regs_d[`$cnt`][`$reg->{width}-1`:0] = cfgIn_data_del[`$reg->{width}-1`:0]; // input only from cfg bus
   //;	}else{
   assign regs_d[`$cnt`][`$reg->{width}-1`:0] = (onehot_en[`$cnt`])?cfgIn_data_del[`$reg->{width}-1`:0]:
						`$reg->{name}`_d[`$reg->{width}-1`:0]; // priority to cfg bus writes
   //;	}
   //;
   `$flop_inst->get_module_name()` `$flop_inst->get_instance_name()`
     (.Clk(Clk), .Reset(Reset), .Enable(regs_en[`$cnt`]),
      .data_in(regs_d[`$cnt`][`$reg->{width}-1`:0]), .data_out(regs_q[`$cnt`][`$reg->{width}-1`:0]));
   //;
   //;	if ($reg->{IEO} =~ m/o/i){
   assign `$reg->{name}`_q[`$reg->{width}-1`:0] = regs_q[`$cnt`][`$reg->{width}-1`:0]; // assign value to the relevant output
   //;	}
   //;	if ($cfg_bus_width > $reg->{width}){
   assign regs_q[`$cnt`][`$cfg_bus_width-1`:`$reg->{width}`] = '0; // pad the config bus with zeros
   //;	}
   
   //; $cnt++;
   //;} # end of foreach ...
  

endmodule // `$self->get_module_name()`
