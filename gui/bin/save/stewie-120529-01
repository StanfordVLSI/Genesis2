#! /bin/bash
# No #! directive means /bin/sh...right???

#  stewie setup . 
#    - (assumes running from unpacked tarball)
#    - link CONFIG.TXT => configs/CONFIG_stewie.txt
#    - link index.htm => configs/index_stewie.htm
#  stewie clone /tmp/foo
#    - same as "setup" except builds a new installation in indicated directory
#  stewie kill
#    - finds and kills running stewie server(s)
#  stewie start <portno>
#    - starts a new stewie server on port "portno" (default=first available)
#  stewie restart <portno>
#    - kill existing server and restart

no_home_dir () {
    mydir=$1;

   #cmd=`basename $0`
    cmd=${0##*/}

    echo "Sorry, new rule: stewie home directory must be specified on command line."
    echo
    echo "Examples:"
    echo "  $cmd start `pwd`";
    cd $mydir/..
    echo "  $cmd start `pwd`";
    echo
}


stewie_help () {
  cmd=`basename $0`
  cmd=${0##*/}

  echo "Usage:"
  echo
  echo "  $cmd clone <olddir> <newdir> # clone existing installation olddir and put it in newdir"
  echo "  $cmd setup <dir> <port>      # ready the stewie install at <dir>, port <port>"
  echo "  $cmd start <dir> [port]      # start stewie for <dir> using indicated port (default = next avail)"
  echo "  $cmd list                    # Find and list running stewie servers"
  echo "  $cmd kill                    # kill existing stewie server(s)"
  echo "  $cmd restart [dir] [port]    # kill and then restart (see above)"
  echo

  mydir=${0%/*}/
  test $mydir = "$0/" && mydir=./
  guidir=`cd $mydir/..;pwd`;

  echo "Examples:"
  echo "  $cmd clone $guidir ."
  echo "  $cmd start ."
  echo
}

add_slash() {
  # Dirname should end in slash; if not, add one.
  # E.g. `add_slash a/b/c/d` => "a/b/c/d/"
  dirname=$1
  n1=`expr "$dirname" : '.*/'`; # Longest string ending in slash
  n2=`expr "$dirname" : '.*'`;  # Length of entire string
  test $n1 -eq $n2 && echo "$dirname" || echo "$dirname/"
}

#remove_slash() {
#  # If dirname has a slash at the end, remove it.
#  # E.g. `remove_slash a/b/c/d/` => "a/b/c/d"
#  dirname=$1
#  n=`expr "$dirname" : '.*[^/]'`;  # Nchars before final slash.
#  expr substr $dirname 1 $n
#}

populate_design_dir() {
    # Pre-populate design dir $ddir using source design $sdir, e.g.
    # populate_design_dir $gui/designs/cmp $gui/examples/cmp

    ddir=$1; sdir=$2;

    if [ -e $ddir ]; then
        echo "NOTE: example design $ddir already exists.";

    elif [ ! -e $sdir ]; then
        echo "NOTE: example design $sdir not found.";

    else
        echo "NOTE: building example design $sdir -> $ddir";

        if [ ! -e $ddir ]; then mkdir $ddir; fi
        cp $sdir/{Makefile,*.xml} $ddir 2> /dev/null
        sdir_fullpath=`cd $sdir; pwd`
        echo $sdir_fullpath > $ddir/__SOURCEDIR__
    fi
}

function doublecheck_setup_file() {
    gui=$1;
            echo
            echo "Found Genesis setup file '$setup'";

            #echo '=============================================================================='
            #cat $setup | egrep -v '^[ \t]*#' | egrep .
            #echo '=============================================================================='
            #echo; echo -n "Does this look like a valid setup file for your site (y or n)? "
            
            echo "Please make sure this setup file is correct for your site."
            echo "If not, GUI will fail when it tries to build a new design."
            echo; echo -n "Ready to continue (y or n)? "
            read answer; answer=${answer:0:1} # First char only
            if `test "$answer" = 'n' -o "$answer" = 'N'`; then
                echo; echo "Please fix '$setup' and try again.  Bye now."; echo;
                return 255; # exit -1
            fi
}


function check_for_setup_file() {
    gui=$1;

        setup="$gui/configs/setup.cshrc";

        if `test \! -e "$setup"`; then
            echo
            echo "ERROR: Stewie could not find a valid setup file for your site."
            echo "ERROR: Setup file should be here: '$setup'"
            echo "ERROR: For sample setup files see configs/setup* in distribution."
            echo "ERROR: You also might want to try starting over: /bin/rm -rf $gui"
            echo
            return 255; # exit -1
        else
            doublecheck_setup_file $gui || return 255;
            echo
        fi
}

stewie_setup() {

    ###############################################################################
    # Given e.g. dir=/tmp/stewie and port=8080, build index.htm and CONFIG.TXT etc.

    # E.g. "stewie_setup setup /tmp/stewie 8080"
    if `test \( $# -ne 2 \)`; then stewie_help; exit; fi
    dir=$1; port=$2;

    cd $dir; dir=`pwd`;

    ######################################################################
    # Destroy and rebuild index.htm and CONFIG.TXT to reflect new port num

    f=index.htm
    if `test -e $f`; then echo "WARNING: Deleting existing $f"; rm $f; fi

    f=CONFIG.TXT
    if `test -e $f`; then echo "WARNING: Deleting existing $f"; rm $f; fi

    URL="http://"`hostname`":"$port   # E.g. "http://neva-2.stanford.edu:8080"
    echo

    index=configs/index_stewie.htm;
    echo "Building new index.htm with $URL and $dir ..."
    if `test \! -e $index`; then
        echo; echo "ERROR Cannot find $dir/$index."; stewie_help; exit;
    fi
    cat $index\
        | sed "s|STEWIE_BASE_HREF_HERE|$URL|g"\
        | sed "s|STEWIE_DIR_HERE|$dir|g"\
        > index.htm

    config=configs/CONFIG_stewie.txt
    echo "Building new CONFIG.TXT with $URL and $dir ..."
    if `test \! -e $config`; then
        echo; echo "ERROR Cannot find $dir/$config."; stewie_help; exit;
    fi
    cat $config\
        | sed "s|STEWIE_BASE_HREF_HERE|$URL|g"\
        | sed "s|STEWIE_DIR_HERE|$dir|g"\
        > CONFIG.TXT

    # Problems editing design list if not writable!!!
    if [ -e "configs/design_list_stanford.txt" ]; then
        `chmod +w configs/design_list_stanford.txt`;
    fi

    # Against my better judgment, I'm going to pre-populate the designs directory
    # with cmp and demo examples.
    # check_designs $gui/designs
    echo
    populate_design_dir designs/CMP examples/cmp
    populate_design_dir designs/demo examples/demo
    echo

    # If setup.cshrc already exists, don't muck with it.

    setup="configs/setup.cshrc";
    if [ -e $setup ]; then
        doublecheck_setup_file $dir && return 0 || return 255
    fi

    # If this is Stanford, use the stanford-specific setup.cshrc

    domain=`hostname -d`;
    stanford=""
    test=`expr $domain : stanford`; if [ $test -eq 8 ]; then stanford=1; fi
    test=`expr $domain : Stanford`; if [ $test -eq 8 ]; then stanford=1; fi
    test=`expr $domain : STANFORD`; if [ $test -eq 8 ]; then stanford=1; fi
    if [ $stanford ]; then
        echo 'Looks like you are at Stanford; I will use default Stanford setup.cshrc file.'
        echo
        cd $dir/configs
        if `test \! -e "$setup"`; then ln -s setup_stanford.cshrc setup.cshrc; fi
    else
        # How did we get here?
        #   1. "start" did not install a setup.cshrc file

        echo; echo; echo; echo
        echo "ERROR: Cannot find setup file '$dir/configs/setup.cshrc'"
        echo "You're probably going to need one if Stewie is to run without error."
        echo "You can fix it now or you can fix it later, but you're gonna have to fix it eventually."
        echo "For more information contact your GUI administrator."
        echo
        echo -n "Type <enter> when you're ready to continue: "
        read answer;
    fi

#        echo; echo; echo; echo
#        echo "NOTE!  It appears that this installation is not a Stanford site.  Please"
#        echo "double check that the following files are appropriate for your location:"
#        echo
#        echo "    $dir/configs/setup.cshrc"
#        echo "    $dir/configs/design_list_stanford.txt"
#        echo
#        echo "If you're uncertain, the safest thing is to null them out like so:"
#        echo "    cat /dev/null > $dir/configs/setup.cshrc"
#        echo "    cat /dev/null > $dir/configs/design_list_stanford.txt"
#        echo
#        echo -n "Type <enter> when you're ready to continue: "
#        read answer;
#    fi
#    check_for_setup_file $gui || return 255
}

verify_dir() {
    # E.g. "verify_dir <dir>"
    dir=$1

    # If <dir> not exist, then create it;
    if `test \! -e "$dir"`; then mkdir "$dir"; fi

    # If <dir> exists but not writeable, then complain and die.
    touch $dir/deleteme-write-test || {
        echo; echo "ERROR: Directory '$dir' not writeable maybe?"; echo
        ls -ld $dir
        exit -1;
    }
    /bin/rm $dir/deleteme-write-test
}

stewie_list() {
    echo "   PID  USER    PORT  GUI_HOME"
    ps aux --cols 300 \
        | egrep 'perl .*[/]stewie.pl' \
        | awk '{printf("%6s %-8s %s  %s\n", $2, $1, substr($NF,6,999), substr($(NF-1),1,999))}'
}

check_designs() {
    # E.g. "check_designs /home/steveri/gui/designs"
    dir=$1

    # If one or more dirs in design directory are unwritable,
    # warn and give the option to quit.

    fail=0
    for f in `ls $dir`; do
        test -d $dir/$f && {
            test -w $dir/$f || {
                #echo "$dir/$f not writeable:";
                ls -ld $dir/$f;
                #echo
                fail=1
            }
        };
    done
    test $fail -eq 1 && {
        echo; echo "WARNING: Found one or more unwriteable designs (above)."
        echo "If you are steveri, maybe you want to do"
        echo "  ~/gui/bin/sr_stewie_prep.sh"
        echo "  ~/gui/bin/sr_dev_restore.sh"
        echo -n "Okay to continue (y or n)? "
        read answer; answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then
            echo "Okay, bye."; echo; exit;
        fi
        echo
    }
}

build_missing_gui_dir() {
    # Use $bindir to build missing $targdir.
    bindir=`add_slash $1`; targdir=$2;
    echo "Oops $targdir no exist. I will build it for you."
    ${bindir}stewie clone $bindir/.. $targdir || exit -1
}

version_check() {

  bindir=$1   # E.g. "/cad/genesis2/r10345/gui/bin"
  targdir=$2; # E.g. "." or "/tmp/mystewie"

  srcverfile=$bindir/../configs/install/version_number.txt;
  targverfile=$targdir/configs/install/version_number.txt;

  src_version=`cat $srcverfile  2> /dev/null || echo -1` 
  targ_version=`cat $targverfile 2> /dev/null || echo -1` 

#  echo src version $src_version; echo targ version $targ_version; echo

  if [ $targ_version -lt $src_version ]; then
      echo Your stewie appears to be either missing or outdated.
      echo "  Your stewie version number: $targ_version"
      echo "  Latest distribution number: $src_version"

      echo; echo -n "Shall I install the latest version for you (y or n)? "
      read answer; answer=${answer:0:1} # First char only
      if `test "$answer" = 'n' -o "$answer" = 'N'`; then
          echo; echo "Okay continuing with 'stewie start'"
      else
         #echo; echo "  $bindir/stewie clone $bindir/.. $targdir"; echo
          $bindir/stewie clone $bindir/.. $targdir || exit -1
      fi
  fi
}

verify_stewie_dir() {
    srcdir=$1; dstdir=$2

    # It's okay to overwrite dest dir if
    #     1) it's harmlessly small, or
    #     b) it's already a (presumably outdated) stewie dir

    if [ ! -e $srcdir ]; then echo "Cannot find source  directory '$srcdir'"; return 1; fi
    if [ ! -e $dstdir ]; then echo "Cannot find destination directory '$dstdir'"; return 1; fi

    echo
    echo "Checking to see if '$dstdir' is harmlessly small..."
    nlines=`find $dstdir | wc -l`
    if [ $nlines -lt 100 ]; then
        echo "I'll allow it.";
        return 0;  # Can return 0-255; Anything other than 0 constitutes FAIL
    fi

    echo
    echo "Checking source dir '$srcdir' against destination dir '$dstdir'"
    echo "diff -r -q $srcdir $dstdir"
    tmpfile=/tmp/stewie_vsd.$$
    diff -r -q $srcdir $dstdir \
        -x \*archives\* \
        -x \*designs\* \
        -x \*latest-release\* \
        -x \*notes\* \
        -x \*old\* \
        -x \*sample\* \
        -x \*save\* \
        -x \*scratch\* \
        -x \*tmp\*\* \
        -x \*\~ \
        | grep -v differ \
        > $tmpfile

    nlines=`cat $tmpfile | wc -l`
    if [ $nlines -gt 100 ]; then
        echo; echo; echo
        echo "WARNING: I don't think '$dstdir' is a valid stewie directory"
        echo "See '$tmpfile' for the diff that says why, e.g.:"
        echo "  less $tmpfile"
        echo
        echo "For a clean install, you can delete the directory and try again, e.g."
        echo "  /bin/rm -rf $newdir/*"
        echo "  $0 start $newdir"
        echo ""
        echo "Otherwise, if you want to continue from here, you're going to have to"
        echo "answer 'yes' to 'Really do it?' THREE TIMES (yes I'm paranoid)."
        echo
        echo -n "    1. Really overwrite '$newdir' (y or n)? "; read answer
        answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then return 255; fi

        echo -n "    2. Really overwrite '$newdir' (y or n)? "; read answer
        answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then return 255; fi

        echo -n "    3. Really overwrite '$newdir' (y or n)? "; read answer
        answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then return 255; fi

        echo
    fi
    rm $tmpfile
    return 0;  # Can return 0-255; Anything other than 0 constitutes FAIL
}

#tell_user_to_delete_and_try_again() {
#    newdir=$1
#    echo -n "ERROR: '$newdir' exists and is non-empty; "
#    echo "maybe delete it and try again, i.e."
#    echo
#    echo "    /bin/rm -rf $newdir"
#    echo "    $0 start $newdir";
#    echo
#    echo "or make up a new directory to use."
#    echo
#}

unpack_tarball() {
    olddir=$1; newdir=$2
    tarball=/tmp/gui.tar.bz2

    # Build an up-to-date tarfile (creates $tarball)
    echo; echo Building new gui, please be patient...
    $olddir/configs/install/build_tarfile.sh -q || return 255

    # Expand the tarball to create /tmp/gui-unpack-$$/gui
    mkdir /tmp/gui-unpack-$$
    pushd /tmp/gui-unpack-$$ > /dev/null
    tar xjf $tarball || return 255
    /bin/rm $tarball          # Finished w/tarball
    popd > /dev/null

#        echo "Okay copying gui to its new home \"$newdir\""; echo;
#        echo "i am here: `pwd`"
#        echo "i wanna do this: mv /tmp/gui-unpack-$$/gui/\* $newdir"
#        echo "will that work?"
#        exit -1

    # Preserve existing design and setup files

    df=configs/design_list_stanford.txt
    if [ -e $newdir/$df ]; then
        echo; echo "Found existing design file '$newdir/$df'..."
        df_is_different="yes"
        cmp $newdir/$df /tmp/gui-unpack-$$/gui/$df && df_is_different="no"
        if [ $df_is_different == "no" ]; then
            echo "...same as new design file '/tmp/gui-unpack-$$/gui/$df'"
        else
            echo; echo; echo
            echo -n "To preserve your existing design file (recommended), "
            echo "answer 'y' to the following question:"
            echo -n "Preserve existing design file '$newdir/$df' (y or n)? "
            read answer; answer=${answer:0:1} # First char only
            if `test "$answer" = 'y' -o "$answer" = 'Y'`; then
                rm -f /tmp/gui-unpack-$$/gui/$df
            fi
        fi
        echo; echo
    fi

    sf=configs/setup.cshrc
    if [ -e $newdir/$sf ]; then
        echo; echo; echo
        echo "Found existing setup file(s): "
        ls -l $newdir/$sf
        echo
        echo -n "To preserve your existing setup file(s) (recommended), "
        echo "answer 'y' to the following question:"
        echo -n "Preserve existing setup files (y or n)? "
        read answer; answer=${answer:0:1} # First char only
        if `test "$answer" = 'y' -o "$answer" = 'Y'`; then
            rm -f /tmp/gui-unpack-$$/gui/configs/setup*
        fi
        echo; echo
    fi

#    mv -f /tmp/gui-unpack-$$/gui/* $newdir || return 255
    cp -rf /tmp/gui-unpack-$$/gui/* $newdir || return 255

    # Clean up your mess and leave.
    /bin/rm -rf /tmp/gui-unpack-$$
    return 0
}

##############################################################################
# Executable code begins here.

if `test \( $# -eq 0 \)`; then stewie_help; exit; fi

case "$1" in

    (clone) {
        if `test \( $# -ne 3 \)`; then stewie_help; exit; fi
        olddir=$2; newdir=$3;

        # Dots and tildes and such can MESS YOU UP, MAN!
        olddir=`cd $olddir; pwd`
        if [ -e $newdir ]; then newdir=`cd $newdir; pwd`; fi

        echo;
        echo -n "Clone from \"$olddir\" to \"$newdir\", right (y or n)? ";
        read answer; answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then
            echo "Okay bye"; exit -1;
        fi
        echo

        # Best is if this is a new install to a nonexistent directory
        if [ ! -e $newdir ]; then mkdir $newdir; fi
        
        # Just as good if directory exists but is completely empty

#        # (verify_stewie_dir does this check now)
#        newdir_has_files="no"
#        ls -d $newdir/* 1> /dev/null 2> /dev/null && newdir_has_files="yes"
#        if [ $newdir_has_files == "no" ]; then
#            pwd
#            echo found no files
#            #unpack_tarball $olddir $newdir || exit 255
#            exit -1
#            exit
#        fi
#        exit -1

        # Trying hard to prevent user error---don't want to destroy the wrong directory!

        verify_stewie_dir $olddir $newdir || exit -1
        echo Okay here we go...
        echo; echo
        unpack_tarball $olddir $newdir || exit 255
        exit

        newdir_is_valid_stewie_dir="no"
#        verify_stewie_dir $olddir $newdir && newdir_is_valid_stewie_dir="yes"
#        if [ $newdir_is_valid_stewie_dir == "yes" ]; then
#            echo; echo "hooray it looks like a valid overwriteable stewie dir"; echo
#            exit -1
#        else
#            tell_user_to_delete_and_try_again $newdir
#            exit -1;
#        fi
#        exit
#exit -1

#        # DON'T DO THIS!!
#        echo "Clone will obliterate and replace directory '$newdir'"
#        echo -n "Is that okay (y or n)? "
#        read answer; answer=${answer:0:1} # First char only
#        if `test "$answer" = 'n' -o "$answer" = 'N'`; then
#            echo "Okay bye.  Recommend you do this:"
#            echo "/bin/rm -rf $newdir";
#            echo "or make up a new directory to use."
#            exit -1;
#        fi
#        /bin/rm -rf $newdir/*
#        unpack_tarball $olddir $newdir || exit 255
#        exit

##############################################################################
#        tarball=/tmp/gui.tar.bz2
#
#      # Build an up-to-date tarfile (creates $tarball)
#        echo; echo Building new gui, please be patient...
#        $olddir/configs/install/build_tarfile.sh -q || exit -1
#
#      # Expand the tarball to create /tmp/gui-unpack-$$/gui
#        mkdir /tmp/gui-unpack-$$
#        pushd /tmp/gui-unpack-$$ > /dev/null
#          tar xjf $tarball || exit -1
#          /bin/rm $tarball          # Finished w/tarball
#        popd > /dev/null
#
##        echo "Okay copying gui to its new home \"$newdir\""; echo;
##        echo "i am here: `pwd`"
##        echo "i wanna do this: mv /tmp/gui-unpack-$$/gui/\* $newdir"
##        echo "will that work?"
##        exit -1
#
#        mv -f /tmp/gui-unpack-$$/gui/* $newdir || exit -1
#
#      # Clean up your mess and leave.
#        /bin/rm -rf /tmp/gui-unpack-$$
#        exit;
##############################################################################
    };;

    (setup) {
        shift;           # "setup /tmp/stewie 8080" => "/tmp/stewie 8080"
        stewie_setup $*;
        exit;
    };;
    
    (list) {
        stewie_list;
        echo
         procs=`ps ax | egrep 'perl .*[/]stewie.pl' | awk '{print $1}'`;
        for p in ${procs[*]}; do echo kill $p; done;
        exit;
    };;

    (kill) {
        stewie_list > /tmp/stewie_list.$$
        nlines=`cat /tmp/stewie_list.$$ | wc -l`
        if [ $nlines -lt 2 ]; then echo No stewies found on `hostname`.; exit; fi
        rm  /tmp/stewie_list.$$

        echo "Before:"; stewie_list

        echo
        procs=`ps ax | egrep 'perl .*[/]stewie.pl' | awk '{print $1}'`;
        for p in ${procs[*]}; do
            echo -n kill $p;
            echo -n ": Really do it (y or n)? "; read answer

            answer=${answer:0:1} # First char only
            if `test "$answer" = 'y' -o "$answer" = 'Y'`; then
                kill $p;
            fi
        done;
        echo

        echo "After:"; stewie_list; echo
        exit
    };;

    (start) {
        # How the hell does this work???
        # I guess "%/*" means "match everything up to the final occurrence of '/'" sorta
        mydir=${0%/*}/
        test $mydir = "$0/" && mydir=./

        # Call to get_stewie_args returns e.g.
        # "ARGS /home/steveri/smart_memories/Smart_design/ChipGen/gui 8080"

        shift;  # Remaining args are "<dir> [port]"; port is optional, dir is not.

#        # Set gui dir
#        gsa_dir=""
#        if `test \( $# -gt 0 \)`; then
#            # assume first arg, if any, is a dir
#            gsa_dir="gui=$1"; shift;
#        fi

        # First arg after "stewie start" must be target directory
        if `test \( $# -eq 0 \)`; then
            no_home_dir "$mydir"
#             stewie_help;
            exit -1;
        fi;
#         gsa_dir="gui=$gui";

        gui=$1; shift;

        # Second argument after "stewie start" is optional desired portnum.
        gsa_port=""
        if `test \( $# -gt 0 \)`; then
            # assume second arg, if any, is a port
            gsa_port="port=$1 -nosearch"; shift;
        fi

        # Set gsa_port to next open port, if necessary
        #echo ${mydir}get_stewie_args.pl $gsa_dir $gsa_port 
        gsa_dir="gui=foo"
        ${mydir}get_stewie_args.pl $gsa_dir $gsa_port > /tmp/tmp.$$ || exit
        stewie_args=(`cat /tmp/tmp.$$ | grep ARGS | sed 's/ARGS //'`)
        # cat /tmp/tmp.$$
        /bin/rm /tmp/tmp.$$

        #gui=${stewie_args[0]};
        # BUG/TODO: Notice gsa_dir is useless and "gui" result (stewie_args[0]) gets
        # ignored; replace "get_stewie_args dir port" (above) w/"find_free_port port"

        port=${stewie_args[1]}

        if [ ! -d $gui ]; then
            build_missing_gui_dir $mydir $gui
        else
            # If we appear to be in a perforce directory, don't
            # even ATTEMPT setup or update.
            t=`cd $gui; pwd`
            t2=`expr "$t" : '.*/ChipGen/gui$'`
            if [ $t2 != 0 ]; then inperforce='y'; else inperforce='n'; fi
            if [ $inperforce = 'y' ]; then
                echo -n "You appear to be in a perforce directory; "
                echo    "skipping version check."
                echo "If you want to force an update, use 'stewie clone'."
            else
                version_check $mydir $gui
            fi
        fi

        #echo gui before: $gui
        gui=`cd $gui; pwd`;
        #echo gui after: $gui

        # For each directory $gui/scratch and $gui/designs:
        #   if dir not exist, then create it;
        #   if dir exists but not writeable, then complain and die.
        # BUG/TODO Should this be part of stewie_setup??

        verify_dir $gui/scratch
        verify_dir $gui/designs

        # Maybe trouble if one or more dirs in design directory
        # are unwritable;  warn and give the option to quit.
        # BUG/TODO Should this be part of stewie_setup??
        check_designs $gui/designs

#for f in `ls`; do test -d $f &&
# { test -w $f || { echo $f not writeable; ls -ld $f; echo; } }; done

        savedir=`pwd`
        stewie_setup $gui $port || exit -1
        cd $savedir

#        # Bigger trouble if no "configs/setup.cshrc"
#        check_for_setup_file $gui || exit -1

#       echo "ho ho gui=$gui port=$port"

        # Ha ha won't work on kiwi unless we load stuff
        h=`hostname`;
        iskiwi=`expr $h : kiwi`
        if [ `expr $h : kiwi` == 4 ]; then
            source /cad/modules/tcl/init/bash
            module load base
            module load genesis2
        fi

        echo "${mydir}stewie.pl gui=\"$gui\" port=$port"
        ${mydir}stewie.pl gui="$gui" port=$port
        exit
    };;

    (restart) {
        $0 kill
        shift;
        $0 start $*
        exit;
    };;
esac

stewie_help;



#exit;
#
#HELP:
#echo "i got your help right HERE"
#
