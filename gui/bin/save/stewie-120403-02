#! /bin/bash
# No #! directive means /bin/sh...right???

#  stewie setup . 
#    - (assumes running from unpacked tarball)
#    - link CONFIG.TXT => configs/CONFIG_stewie.txt
#    - link index.htm => configs/index_stewie.htm
#  stewie clone /tmp/foo
#    - same as "setup" except builds a new installation in indicated directory
#  stewie kill
#    - finds and kills running stewie server(s)
#  stewie start <portno>
#    - starts a new stewie server on port "portno" (default=first available)
#  stewie restart <portno>
#    - kill existing server and restart

stewie_help () {
  cmd=`basename $0`
  cmd=${0##*/}

  echo "Usage:"
  echo
  echo "  $cmd clone <olddir> <newdir> # clone existing installation olddir and put it in newdir"
  echo "  $cmd setup <dir> <port>      # ready the stewie install at <dir>, port <port>"
  echo "  $cmd start <dir> [port]      # start stewie for <dir> using indicated port (default = next avail)"
  echo "  $cmd list                    # Find and list running stewie servers"
  echo "  $cmd kill                    # kill existing stewie server(s)"
  echo "  $cmd restart [dir] [port]    # kill and then restart (see above)"
  echo
  echo "Examples:"
  echo "  $cmd setup /tmp/stewie 8080"
  echo
}

stewie_setup() {

    # Given e.g. dir=/tmp/stewie and port=8080, build index.htm and CONFIG.TXT etc.

    # E.g. "stewie_setup setup /tmp/stewie 8080"
    if `test \( $# -ne 2 \)`; then stewie_help; exit; fi
    dir=$1; port=$2;

    cd $dir

    f=index.htm
    if `test -e $f`; then echo "WARNING: Deleting existing $f"; rm $f; fi

    f=CONFIG.TXT
    if `test -e $f`; then echo "WARNING: Deleting existing $f"; rm $f; fi

    URL="http://"`hostname`":"$port   # E.g. "http://neva-2.stanford.edu:8080"
    echo

    index=configs/index_stewie.htm;
    echo "Building new index.htm with $URL and $dir ..."
    if `test \! -e $index`; then
        echo; echo "ERROR Cannot find $dir/$index."; stewie_help; exit;
    fi
    cat $index\
        | sed "s|STEWIE_BASE_HREF_HERE|$URL|g"\
        | sed "s|STEWIE_DIR_HERE|$dir|g"\
        > index.htm

    config=configs/CONFIG_stewie.txt
    echo "Building new CONFIG.TXT with $URL and $dir ..."
    if `test \! -e $config`; then
        echo; echo "ERROR Cannot find $dir/$config."; stewie_help; exit;
    fi
    cat $config\
        | sed "s|STEWIE_BASE_HREF_HERE|$URL|g"\
        | sed "s|STEWIE_DIR_HERE|$dir|g"\
        > CONFIG.TXT
}

verify_dir() {
    # E.g. "verify_dir <dir>"
    dir=$1

    # If <dir> not exist, then create it;
    if `test \! -e "$dir"`; then mkdir "$dir"; fi

    # If <dir> exists but not writeable, then complain and die.
    touch $dir/deleteme-write-test || {
        echo; echo "ERROR: Directory '$dir' not writeable maybe?"; echo
        ls -ld $dir
        exit -1;
    }
    /bin/rm $dir/deleteme-write-test
}

check_designs() {
    # E.g. "check_designs /home/steveri/gui/designs"
    dir=$1

    # If one or more dirs in design directory are unwritable,
    # warn and give the option to quit.

    fail=0
    for f in `ls $dir`; do
        test -d $dir/$f && {
            test -w $dir/$f || {
                #echo "$dir/$f not writeable:";
                ls -ld $dir/$f;
                #echo
                fail=1
            }
        };
    done
    test $fail -eq 1 && {
        echo; echo "WARNING: Found one or more unwriteable designs (above)."
        echo "If you are steveri, maybe you want to do"
        echo "  ~/gui/bin/sr_stewie_prep.sh"
        echo "  ~/gui/bin/sr_dev_restore.sh"
        echo -n "Okay to continue (y or n)? "
        read answer; answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then
            echo "Okay, bye."; echo; exit;
        fi
        echo
    }
}

##############################################################################
# Executable code begins here.

if `test \( $# -eq 0 \)`; then stewie_help; exit; fi



case "$1" in

    (clone) {
        if `test \( $# -ne 3 \)`; then stewie_help; exit; fi
        olddir=$2; newdir=$3;
        echo; echo -n "Clone from \"$olddir\" to \"$newdir\", right (y or n)? ";
        read answer; answer=${answer:0:1} # First char only
        if `test "$answer" = 'n' -o "$answer" = 'N'`; then
            echo "Okay bye"; exit;
        fi
        echo
        
      # Make sure destination does not yet exist
        if `test -e $newdir`; then
           #echo "Oops looks like $newdir already exists and I don't want to write over it."
            echo "Looks like $newdir already exists."
            echo "Clone will obliterate and replace any pre-existing files in $newdir."
            echo -n "Is that okay (y or n)? "
            read answer; answer=${answer:0:1} # First char only
            if `test "$answer" = 'n' -o "$answer" = 'N'`; then
                echo "Okay bye.  Recommend you do this:"
                echo "/bin/rm -rf $newdir";
                exit -1;
            fi
            /bin/rm -rf "$newdir"
            echo
        fi

        tarball=/tmp/gui.tar.bz2

      # Build an up-to-date tarfile (creates $tarball)
        echo Building new gui, please be patient...
        $olddir/configs/install/build_tarfile.sh || exit -1

      # Expand the tarball to create /tmp/gui-unpack-$$/gui
        mkdir /tmp/gui-unpack-$$
        cd /tmp/gui-unpack-$$
        tar xjf $tarball || exit
        /bin/rm $tarball          # Finished w/tarball

        echo "Okay copying gui to its new home \"$newdir\""; echo;
        mv gui $newdir

      # Clean up your mess and leave.
        /bin/rm -rf /tmp/gui-unpack-$$
        exit;
    };;

    (setup) {
        shift;           # "setup /tmp/stewie 8080" => "/tmp/stewie 8080"
        stewie_setup $*;
        exit;
    };;
    
    (list) {
        ps aux \
          | egrep 'perl .*[/]stewie.pl' \
          | sed 's,/usr/bin/perl.*gui=,gui=,';
        echo
        procs=`ps ax | egrep 'perl .*[/]stewie.pl' | awk '{print $1}'`;
        for p in ${procs[*]}; do echo kill $p; done;
        exit;
    };;

    (kill) {
        echo "Before:"
        ps aux | egrep 'perl .*[/]stewie.pl';
        procs=`ps ax | egrep 'perl .*[/]stewie.pl' | awk '{print $1}'`;

        echo
        for p in ${procs[*]}; do
            echo -n kill $p;
            echo -n ": Really do it (y or n)? "; read answer

            answer=${answer:0:1} # First char only
            if `test "$answer" = 'y' -o "$answer" = 'Y'`; then
                kill $p;
            fi
        done;
        echo

        echo "After:"
        ps aux | egrep 'perl .*[/]stewie.pl';
        exit
    };;

    (start) {
        # How the hell does this work???
        # I guess "%/*" means "match everything up to the final occurrence of '/'" sorta
        mydir=${0%/*}/
        test $mydir = "$0/" && mydir=./

        # Call to get_stewie_args returns e.g.
        # "ARGS /home/steveri/smart_memories/Smart_design/ChipGen/gui 8080"

        shift;  # Remaining args are "<dir> [port]"; port is optional, dir is not.

#        # Set gui dir
#        gsa_dir=""
#        if `test \( $# -gt 0 \)`; then
#            # assume first arg, if any, is a dir
#            gsa_dir="gui=$1"; shift;
#        fi

        # First arg after "stewie start" must be target directory
        if `test \( $# -eq 0 \)`; then
          echo "Sorry, new rule: stewie home directory must be specified on command line."
          echo
          echo "Examples:"
          echo "  $0 start `pwd`";
          cd $mydir/..
          echo "  $0 start `pwd`";
          echo
          stewie_help;
          exit -1;
        fi;
        gsa_dir="gui=$1"; shift;

        # Second argument after "stewie start" is optional desired portnum.
        gsa_port=""
        if `test \( $# -gt 0 \)`; then
            # assume second arg, if any, is a port
            gsa_dir="port=$1"; shift;
        fi

        #echo ${mydir}get_stewie_args.pl $gsa_dir $gsa_port 

        # Set gsa_port to next open port, if necessary
        ${mydir}get_stewie_args.pl $gsa_dir $gsa_port > /tmp/tmp.$$ || exit
        stewie_args=(`cat /tmp/tmp.$$ | grep ARGS | sed 's/ARGS //'`)
        # cat /tmp/tmp.$$
        /bin/rm /tmp/tmp.$$

        gui=${stewie_args[0]}; port=${stewie_args[1]}

        # For each directory $gui/scratch and $gui/designs:
        #   if dir not exist, then create it;
        #   if dir exists but not writeable, then complain and die.

        # verify_dir $gui/scratch; verify_dir $gui/designs
        verify_dir ./scratch; verify_dir ./designs

        # Maybe trouble if one or more dirs in design directory
        # are unwritable;  warn and give the option to quit.
        #check_designs $gui/designs
        check_designs ./designs

#for f in `ls`; do test -d $f &&
# { test -w $f || { echo $f not writeable; ls -ld $f; echo; } }; done

        # Bigger trouble if no "configs/setup.cshrc"
        setup="$gui/configs/setup.cshrc";

        if `test \! -e "$setup"`;
        then
            echo
            echo "ERROR: Stewie could not find a valid setup file for your site."
            echo "ERROR: Setup file should be here: '$setup'"
            echo "ERROR: For sample setup files see $gui/configs/setup*"
            echo
            exit -1;
        else
            echo
            echo "Found Genesis setup file '$setup'";

            #echo '=============================================================================='
            #cat $setup | egrep -v '^[ \t]*#' | egrep .
            #echo '=============================================================================='
            #echo; echo -n "Does this look like a valid setup file for your site (y or n)? "
            
            echo "Please make sure this setup file is correct for your site."
            echo "If not, GUI will fail when it tries to build a new design."
            echo; echo -n "Ready to continue (y or n)? "
            read answer; answer=${answer:0:1} # First char only
            if `test "$answer" = 'n' -o "$answer" = 'N'`; then
                echo; echo "Please fix '$setup' and try again.  Bye now."; echo;
                exit -1;
            fi
        echo
        fi
#       echo "ho ho gui=$gui port=$port"

        savedir=`pwd`
        stewie_setup $gui $port
        cd $savedir

        echo "${mydir}stewie.pl gui=\"$gui\" port=$port"
        ${mydir}stewie.pl gui="$gui" port=$port
        exit
    };;

    (restart) {
        $0 kill
        shift;
        $0 start $*
        exit;
    };;
esac

stewie_help;



#exit;
#
#HELP:
#echo "i got your help right HERE"
#
