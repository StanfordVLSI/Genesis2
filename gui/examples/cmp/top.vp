/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/TileTest/TileGenTest/top.vp#11 $
 ** $DateTime: 2010/07/06 16:36:10 $
 ** $Change: 8885 $
 ** $Author: danowitz $
 *************************************************************************/
/* *****************************************************************************
 * File: top.vp
 *
 * Description:
 * Top level for tile generator testing.
 *
 * Required Genesis Parameters (default value):Description
 * MODE (VERIF): This is the mode of the generation. Possible values are
 *	         VERIF and SYNTH.
 * ASSERTION (ON): This is the assertion mode of the generation. 
 *		   Possible values are ON/OFF
 * FIXME: enumerate all parameters!
 *
 * Change bar:
 * -----------
 * Date          Author   Description
 * Apr 25, 2010  danowitz Init version
 * Apr 30, 2010  shacham  Some cleanup
 * Jun 21, 2010  danowitz Disentangled data and instr op sizes
 * Jun 23, 2010  danowitz Corrected enable widths
 * Jul 2,  2010  danowitz Various bug fixes
 * Jul 3,  2010  danowitz Connected processor debug signals to tile and drove
 *                        them to 0.
 * Jul 6,  2010  danowitz Passed data op list to test bench
 *
 * ****************************************************************************/

// Mode of the generation
//; #$self->define_param(MODE=>'VERIF');
//; parameter(
//;     Name=>'MODE',
//;     Val=>'VERIF',
//;     List=>['VERIF','SYNTH'],
//;     Doc=>'This is the mode of the generation.'
//; );
//;
//; #$self->define_param(ASSERTION=>'ON');
//; parameter(
//;     Name=>'ASSERTION',
//;     Val=>'ON',
//;     List=>['ON','OFF'],
//;     Doc=>'This is the assertion mode of the generation.'
//; );

// Which tile are we testing?
//; #my $qid = $self->define_param(QUAD_ID => 0); 
//; my $qid = parameter(
//;     Name=>'QUAD_ID',
//;     Val=>'0',
//;     Min=>'0',
//;     Max=>'63',
//;     Step=>'1',
//;     Doc=>'In this example, can have up to 64 quads(!)'
//; );
//; #my $tid = $self->define_param(TILE_ID => 0); 
//; my $tid = parameter(
//;     Name=>'TILE_ID',
//;     Val=>'0',
//;     Min=>'0',
//;     Doc=>'Any number greater than 0, for illustration.'
//; );

// System Configuration
//; #my $NUM_PROCESSOR = $self->define_param('NUM_PROCESSOR'=>1);
//; my $NUM_PROCESSOR = parameter(
//;     Name=>'NUM_PROCESSOR',
//;     Val=>'1'
//; );
//; #my $NUM_MEM_MATS = $self->define_param('NUM_MEM_MATS'=>1);
//; my $NUM_MEM_MATS = parameter(
//;     Name=>'NUM_MEM_MATS',
//;     Val=>'1',
//;     Min=>'1',
//;     Max=>'8',
//;     Step=>'1'
//; );

// Test of bin->hex radix button
//; my $Address1 = parameter(
//;     Name=>'Address1',
//;     Val=>'32760',
//;     Doc=>'Bin-to-hex test: click the little "R"'
//; );
//; my $Address2 = parameter(
//;     Name=>'Address2',
//;     Val=>'0x8000',
//;     Doc=>'Bin-to-hex test'
//; );

// Test of top-level hash array
//; my $toplevel_hasharray = parameter(
//;     Name=>'TOP_HASH',
//;     Val=> [
//;         {colorname => 'red',    colorval => 'ff0000'},
//;         {colorname => 'green',  colorval => '00ff00'},
//;         {colorname => 'blue',   colorval => '0000ff'},
//;     ],
//;     Doc=>'Test of top-level array of hashes.'
//; );


//;# Create the cfg interface object
//; my $tst2dut_cfg_ifc_obj = $self->unique_inst('cfg_ifc', 'tst2dut_cfg_ifc',
//;					     CFG_BUS_WIDTH => 32,
//;					     CFG_ADDR_WIDTH => 32,
//;					     CFG_OPCODE_WIDTH => 2   );
//; # Replicate the config interface
//; my $dut2tst_cfg_ifc_obj = $self->clone_inst($tst2dut_cfg_ifc_obj, 'dut2tst_cfg_ifc');
//; 
//;
//; # Create the design (tile) under test object
//; my $DUT_OBJ = $self->unique_inst('tile', 'DUT', 
//;					QUAD_ID => $qid, TILE_ID => $tid,
//;					CFG_IFC_REF => $tst2dut_cfg_ifc_obj,
//;					NUM_PROCESSOR => $NUM_PROCESSOR, 
//;					NUM_MEM_MATS => $NUM_MEM_MATS,
//;				     );


module `$self->get_module_name()`;

   
   // Clk and Reset signals
   logic Clk;
   logic Reset;
   //; if (($qid == 0) && ($tid == 0)){
    // PreventReset is a chip input signal that prevents processor zero of 
    // tile zero of quad zero from being in a soft reset state. That means that if
    // PreventReset == 0: When Reset is de-asserted the processor is still in 
    //			  SoftReset mode
    // PreventReset == 1: When Reset is de-asserted the processor active
   logic PreventReset;
   //; }

   logic JTDI='b0;
   logic JTMS='b0;
   logic JTCK='b0;
   logic JTRST='b0;
   logic JTDO;
   logic TMode='b0;
   
   // config interfaces to connect the test and the design
   `$tst2dut_cfg_ifc_obj->get_module_name()` `$tst2dut_cfg_ifc_obj->get_instance_name()`();
   `$dut2tst_cfg_ifc_obj->get_module_name()` `$dut2tst_cfg_ifc_obj->get_instance_name()`();

   // Signals for connecting the test and the DUT
   //; my $PROC_OBJ = $DUT_OBJ->get_subinst('p0');
   //; my $DATA_OP_SIZE = $PROC_OBJ->get_param('DATA_OP_WIDTH');
   //; my $INSTR_OP_SIZE = $PROC_OBJ->get_param('INST_OP_WIDTH');
   //; my $DATA_SIZE = $PROC_OBJ->get_param('DATA_BUS_WIDTH');
   //; my $INSTR_SIZE = $PROC_OBJ->get_param('INSTRUCTION_BUS_WIDTH');
   //; my $INSTR_OP_LIST = $PROC_OBJ->get_param('INST_OP_LIST');
   //; my $DATA_OP_LIST = $PROC_OBJ->get_param('DATA_OP_LIST');
   //; my $META_SIZE = $DUT_OBJ->get_param('PROC_META_SIZE');
   //; my $MAT_ADDR_SIZE = $DUT_OBJ->get_param('MAT_ADDR_SIZE');
   //; my $MAT_RET_CODE = $DUT_OBJ->get_param('MAT_RET_CODE');
   //; my $INSTR_EN_SIZE = $INSTR_SIZE/32;
   //; my $DATA_EN_SIZE = $DATA_SIZE/8;
   //; my $MAT_EN_SIZE = $DUT_OBJ->get_param('MAT_EN_WIDTH');
   
   logic [`$DATA_OP_SIZE+$DATA_SIZE+$MAT_ADDR_SIZE+$MAT_EN_SIZE-1`:0] pc2p2msxbar;
   //; my $COUNT = 0;
   //; for ($COUNT = 0; $COUNT < $NUM_PROCESSOR; $COUNT++){
   logic [`$DATA_OP_SIZE+$MAT_ADDR_SIZE+$DATA_SIZE+$DATA_EN_SIZE-1`:0] data_tie2pc_`$COUNT`;
   logic [`$INSTR_OP_SIZE+$MAT_ADDR_SIZE+$INSTR_SIZE+$INSTR_EN_SIZE-1`:0] instr_tie2pc_`$COUNT`;
   logic [`$META_SIZE+$DATA_SIZE-1`:0] pc2data_tie_`$COUNT`;
   logic [`$META_SIZE+$INSTR_SIZE-1`:0] pc2instr_tie_`$COUNT`;
   //; }
   logic external_stall;
   logic [`$META_SIZE+$DATA_SIZE-1`:0] ms2pxbar2pc;


   /****************************************************************************
    * Instantiate clocks
    * *************************************************************************/
   clocker
     #(.half_period(5), .num_rst_clks(20))
   main_clocker
     (.Clk(Clk), .Reset(Reset));



   
   /****************************************************************************
    * Instantiate DUT 
    * *************************************************************************/
   // Design Under Test instantiation
   //; my $DUT_MOD = $DUT_OBJ->get_module_name();
   //; my $DUT = $DUT_OBJ->get_instance_name();
   `$DUT_MOD` `$DUT` 
     (
      .Clk(Clk),
      .Reset(Reset),
     //; if (($qid == 0) && ($tid == 0)){
      // PreventReset is a chip input signal that prevents processor zero of 
      // tile zero of quad zero from being in a soft reset state. That means that if
      // PreventReset == 0: When Reset is de-asserted the processor is still in 
      //			  SoftReset mode
      // PreventReset == 1: When Reset is de-asserted the processor active
      .PreventReset(PreventReset),
     //; }
      .cfgIn(`$tst2dut_cfg_ifc_obj->get_instance_name()`.cfgIn),
      .cfgOut(`$dut2tst_cfg_ifc_obj->get_instance_name()`.cfgOut),
      .pc2p2msxbar(pc2p2msxbar),
      //; $COUNT = 0;
      //; for ($COUNT = 0; $COUNT < $NUM_PROCESSOR; $COUNT++){
      .data_tie2pc_`$COUNT`(data_tie2pc_`$COUNT`),
      .instr_tie2pc_`$COUNT`(instr_tie2pc_`$COUNT`),
	  .pc2instr_tie_`$COUNT`(pc2instr_tie_`$COUNT`),								  .pc2data_tie_`$COUNT`(pc2data_tie_`$COUNT`),					  
      //; }
      .external_stall(external_stall),
      .ms2pxbar2pc(ms2pxbar2pc),
	  .JTDI(JTDI),
	  .JTMS(JTMS),
	  .JTCK(JTCK),
	  .JTRST(JTRST),
	  .JTDO(JTDO),
	  .TMode(TMode)
      );

   
   /****************************************************************************
    * Instantiate Test
    * **************************************************************************/
   //; my $TB_OBJ = $self->unique_inst('test', 'tb', 
   //;					QUAD_ID => $qid, TILE_ID => $tid,
   //;					CFG_IFC_REF => $tst2dut_cfg_ifc_obj,
   //;					NUM_PROCESSOR => $NUM_PROCESSOR, 
   //;					DATA_OP_SIZE => $DATA_OP_SIZE,
   //;                  DATA_OP_LIST => $DATA_OP_LIST,
   //;                  INSTR_OP_SIZE => $INSTR_OP_SIZE,
   //;                  INSTR_OP_LIST => $INSTR_OP_LIST,
   //;                  INSTR_EN_SIZE => $INSTR_EN_SIZE,
   //;                  DATA_EN_SIZE => $DATA_EN_SIZE,
   //;                  MAT_EN_SIZE => $MAT_EN_SIZE,
   //;					DATA_SIZE => $DATA_SIZE,
   //;                  INSTR_SIZE => $INSTR_SIZE,
   //;					MAT_ADDR_SIZE => $MAT_ADDR_SIZE, 
   //;					META_SIZE => $META_SIZE,
   //;                  MAT_RET_CODE => $MAT_RET_CODE);
   //; my $TB_MOD = $TB_OBJ->get_module_name();
   //; my $TB = $TB_OBJ->get_instance_name();
   `$TB_MOD` `$TB` 
     (
      .Clk(Clk),
      .Reset(Reset),
     //; if (($qid == 0) && ($tid == 0)){
      // PreventReset is a chip input signal that prevents processor zero of 
      // tile zero of quad zero from being in a soft reset state. That means that if
      // PreventReset == 0: When Reset is de-asserted the processor is still in 
      //			  SoftReset mode
      // PreventReset == 1: When Reset is de-asserted the processor active
      .PreventReset(PreventReset),
     //; }
      .cfgIn(`$dut2tst_cfg_ifc_obj->get_instance_name()`.cfgIn),
      .cfgOut(`$tst2dut_cfg_ifc_obj->get_instance_name()`.cfgOut),
      
      .pc2p2msxbar(pc2p2msxbar),
      //; for ($COUNT = 0; $COUNT < $NUM_PROCESSOR; $COUNT++) {
      .data_tie2pc_`$COUNT`(data_tie2pc_`$COUNT`),
      .instr_tie2pc_`$COUNT`(instr_tie2pc_`$COUNT`),
      .pc2data_tie_`$COUNT`(pc2data_tie_`$COUNT`),
      .pc2instr_tie_`$COUNT`(pc2instr_tie_`$COUNT`),
      //; }
      .external_stall(external_stall),
      .ms2pxbar2pc(ms2pxbar2pc)
      );
   
   endmodule
