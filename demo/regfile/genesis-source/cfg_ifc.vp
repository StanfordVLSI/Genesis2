/* *****************************************************************************
 * File: cfg_ifc.vp
 * 
 * Description:
 * Interface definitions and parametrization for the cfg_ifc primitive
 * 
 * REQUIRED GENESIS PARAMETERS:
 * ----------------------------
 * * CFG_BUS_WIDTH - width of the configuration bus (default is 32bit)
 * * CFG_ADDR_WIDTH - width of the configuration bus address (default is 32bit)
 * * CFG_OPCODE_WIDTH - width of the configuration bus opcode (default is 2bit)
 * 
 * Inputs:
 * -------
 * cfgIn.addr - input address for config transaction
 * cfgIn.data - input data for config transaction
 * cfgIn.op -  nop/write/read/bypass enabler for the address specified on cfgIn.addr 
 *		and the data specified by cfgIn.data
 * 
 * Outputs:
 * --------
 * cfgOut.addr - output address for config transaction
 * cfgOut.data - output data for config transaction
 * cfgOut.op - output config opcode (for multi module concatenation)
 * 
 * ****************************************************************************/

// ACTUAL GENESIS2 PARAMETERIZATIONS
//; my $cfg_bus_width = $self->define_param('CFG_BUS_WIDTH' => 32);
//; my $cfg_addr_width = $self->define_param('CFG_ADDR_WIDTH' => 32);
//; my $cfg_op_width = $self->define_param('CFG_OPCODE_WIDTH' => 2);

interface `mname()`();
   
   logic [`$cfg_addr_width-1`:0] addr;
   logic [`$cfg_bus_width-1`:0]  data;
   logic [`$cfg_op_width-1`:0] 	 op;
   
   modport cfgIn(//messages arriving from prev cfg node
    input 			 addr,
    input 			 data,
    input 			 op 			 
		   );

   modport cfgOut(// messages sent to next cfg node
    output 			 addr,
    output 			 data,
    output 			 op 			 
		   );
endinterface: `mname()`
